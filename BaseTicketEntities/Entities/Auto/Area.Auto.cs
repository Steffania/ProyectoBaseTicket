
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.3.0
// Created: 22/10/2018 - 09:11 a. m.
// This is a partial class file. The other one is AreaEntity.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using BaseTicketRules.Objects;

using BaseTicketRules.Objects.sys;


using Cooperator.Framework.Core;
using Cooperator.Framework.Core.LazyLoad;
using System;

namespace BaseTicketRules.Entities
{

    /// <summary>
    /// 
    /// </summary>
    public partial class Area : Objects.AreaObject, IMappeableArea, IEquatable<Area>, ICloneable
    {

        #region "Ctor"

        /// <summary>
        /// 
        /// </summary>
        public Area()
            :base()
        {
            
        }

        
        /// <summary>
        /// 
        /// </summary>
        public Area(
			System.Int32 AreaId)
            : base()
        {

			_AreaId = AreaId;

            
            Initialized();
        }
        

        

        /// <summary>
        /// 
        /// </summary>
        public Area(
			System.Int32 AreaId,
			System.String Descripcion)
            : base()
        {

			_AreaId = AreaId;
			_Descripcion = Descripcion;

            
            Initialized();
        }
        
        #endregion

        #region "Fields"

        
        #endregion

        #region "Properties"
        
        #endregion

        /// <summary>
        /// Returns de original value of entity since was created or restored.
        /// </summary>
        public new Area OriginalValue()
        {
            return (Area)base.OriginalValue();
        }

        /// <summary>
        /// 
        /// </summary>
        object ICloneable.Clone()
        {
            Area newObject;            
            

            newObject = (Area)this.MemberwiseClone();
            // Entities
            
            // Colections
            
            // OriginalValue
            Area newOriginalValue;
            if (base.InternalOriginalValue != null)
            {
                newOriginalValue = (Area)this.OriginalValue().MemberwiseClone();
                // Entities
                
                // Colections
                            
                newObject.InternalOriginalValue = newOriginalValue;

            }
            return newObject;            
        }



        /// <summary>
        /// 
        /// </summary>
        void IMappeableArea.CompleteEntity()
        {
        
        }
        

        /// <summary>
        /// 
        /// </summary>
        void IMappeableArea.SetFKValuesForChilds(Area entity)
        {
                
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Equals(Area other)
        {
            return UniqueIdentifierHelper.IsSameObject((IUniqueIdentifiable)this, (IUniqueIdentifiable)other);
        } 

    }

    /// <summary>
    /// 
    /// </summary>
    public interface IMappeableArea
    {
        /// <summary>
        /// 
        /// </summary>
        void CompleteEntity();
        
        /// <summary>
        /// 
        /// </summary>
        void SetFKValuesForChilds(Area entity);
    }

        /// <summary>
        /// 
        /// </summary>
    public partial class AreaList : ObjectList<Area>
    {
    }
}
namespace BaseTicketRules.Views
{
        /// <summary>
        /// 
        /// </summary>
    public partial class AreaListView
        : ObjectListView<Entities.Area>
    {
        /// <summary>
        /// 
        /// </summary>
        public AreaListView(Entities.AreaList list): base(list)
        {
        }
    }
}


