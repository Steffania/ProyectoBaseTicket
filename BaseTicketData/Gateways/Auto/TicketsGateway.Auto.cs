
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.3.0
// Created: 22/10/2018 - 09:11 a. m.
// This is a partial class file. The other one is TicketsGateway.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BaseTicketRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data;
using System.Data.Common;
using System.Reflection;
using System.Web;




namespace BaseTicketRules.Gateways
{
    /// <summary>
    /// 
    /// </summary>
    public partial class TicketsGateway : BaseGateway<TicketsObject, TicketsObjectList>, IGenericGateway
    {

        #region "Singleton"

        static TicketsGateway _instance;

        private TicketsGateway()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TicketsGateway Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TicketsGateway();
                else {
                    TicketsGateway inst = HttpContext.Current.Items["BaseTicketRules.TicketsGatewaySingleton"] as TicketsGateway;
                    if (inst == null) {
                        inst = new TicketsGateway();
                        HttpContext.Current.Items.Add("BaseTicketRules.TicketsGatewaySingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }

        #endregion

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Tickets"; }
        }

        /// <summary>
        /// Return the TicketsGateway type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(TicketsGateway).FullName;}
        }


        

        


        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, TicketsObject entity)
        {
            
            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            Tickets.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetDateTime(7),
reader.GetString(8));
            ((IObject)entity).State = ObjectState.Restored;
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(TicketsObject entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(TicketsObject entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(TicketsObject entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForDelete();
        }

        /// <summary>
        /// Raised after insert and update. Update properties from Output parameters
        /// </summary>
        protected override void UpdateObjectFromOutputParams(TicketsObject row, object[] parameters)
        {
            ((IMappeableTicketsObject) row).UpdateObjectFromOutputParams(parameters);
            ((IObject)row).State = ObjectState.Restored;
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        /// <summary>
        /// Get a TicketsObject by execute a SQL Query Text
        /// </summary>
        public TicketsObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TicketsObjectList by execute a SQL Query Text
        /// </summary>
        public TicketsObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        /// <summary>
        /// Get a TicketsObject by calling a Stored Procedure
        /// </summary>
        public TicketsObject GetOne(System.Int32 TicketId)
        {
            return base.GetOne(new TicketsObject(TicketId));
        }


        // GetBy Objects and Params
            


        

        /// <summary>
        /// Get a TicketsObjectList by calling a Stored Procedure
        /// </summary>
        public TicketsObjectList GetByArea(DbTransaction transaction,System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// Get a TicketsObjectList by calling a Stored Procedure
        /// </summary>
        public TicketsObjectList GetByArea(DbTransaction transaction, IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    

        

        /// <summary>
        /// Get a TicketsObjectList by calling a Stored Procedure
        /// </summary>
        public TicketsObjectList GetByArea(System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// Get a TicketsObjectList by calling a Stored Procedure
        /// </summary>
        public TicketsObjectList GetByArea(IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    

        
        /// <summary>
        /// Delete Tickets
        /// </summary>
        public void Delete(System.Int32 TicketId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_Delete", TicketId);
        }

        /// <summary>
        /// Delete Tickets
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 TicketId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_Delete", TicketId);
        }

            

        


    


    


    


    


    


    


    


    


    


    

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_DeleteByArea", AreaId);
        }

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(DbTransaction transaction, System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_DeleteByArea", AreaId);
        }

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(IUniqueIdentifiable Area)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_DeleteByArea", Area.Identifier());
        }

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(DbTransaction transaction, IUniqueIdentifiable Area)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_DeleteByArea", Area.Identifier());
        }

        


    


        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }

}








