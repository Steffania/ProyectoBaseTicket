
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.3.0
// Created: 22/10/2018 - 09:11 a. m.
// This is a partial class file. The other one is database_firewall_rulesMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BaseTicketRules.Entities.sys;
using BaseTicketRules.Objects.sys;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BaseTicketRules.Mappers.sys
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class database_firewall_rulesMapper : BaseGateway<database_firewall_rulesObject, database_firewall_rulesObjectList>, IGenericGateway
    {


        #region "Singleton"

        static database_firewall_rulesMapper _instance;

        private database_firewall_rulesMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static database_firewall_rulesMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new database_firewall_rulesMapper();
                else {
                    database_firewall_rulesMapper inst = HttpContext.Current.Items["BaseTicketRules.database_firewall_rulesMapperSingleton"] as database_firewall_rulesMapper;
                    if (inst == null) {
                        inst = new database_firewall_rulesMapper();
                        HttpContext.Current.Items.Add("BaseTicketRules.database_firewall_rulesMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={""};
            return s;
        }

        /// <summary>
        ///
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(database_firewall_rulesObject);
        }

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "sys.database_firewall_rules"; }
        }

        /// <summary>
        /// Return the database_firewall_rulesMapper type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(database_firewall_rulesMapper).FullName;}
        }


        
        /// <summary>
        /// If this table is read only
        /// </summary>
        protected override bool IsReadOnly()
        {
            return true;
        }
        

        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, database_firewall_rulesObject entity)
        {
            
            IMappeabledatabase_firewall_rulesObject database_firewall_rules = (IMappeabledatabase_firewall_rulesObject)entity;
            database_firewall_rules.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetDateTime(4),
reader.GetDateTime(5));
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(database_firewall_rulesObject entity)
        {

            IMappeabledatabase_firewall_rulesObject database_firewall_rules = (IMappeabledatabase_firewall_rulesObject)entity;
            return database_firewall_rules.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(database_firewall_rulesObject entity)
        {

            IMappeabledatabase_firewall_rulesObject database_firewall_rules = (IMappeabledatabase_firewall_rulesObject)entity;
            return database_firewall_rules.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(database_firewall_rulesObject entity)
        {

            IMappeabledatabase_firewall_rulesObject database_firewall_rules = (IMappeabledatabase_firewall_rulesObject)entity;
            return database_firewall_rules.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(database_firewall_rulesObject entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeabledatabase_firewall_rulesObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


          


        /// <summary>
        /// Get a database_firewall_rulesObject by execute a SQL Query Text
        /// </summary>
        public database_firewall_rulesObject GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a database_firewall_rulesObjectList by execute a SQL Query Text
        /// </summary>
        public database_firewall_rulesObjectList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        

        // GetOne By Objects and Params
            


        


        

        


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BaseTicketRules.Wrappers.sys
{
    /// <summary>
    /// 
    /// </summary>
    public partial class database_firewall_rulesMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BaseTicketRules.Mappers.sys.database_firewall_rulesMapper Instance()
        {
            return BaseTicketRules.Mappers.sys.database_firewall_rulesMapper.Instance(); 
        }
        
        

        // GetBy Objects and Params
            

        

        /// <summary>
        /// GetAll database_firewall_rulesObject 
        /// </summary>
        public Objects.sys.database_firewall_rulesObjectList GetAll(){  
            return Instance().GetAll();
        }

        


        //Database Queries 
        


    }
}





namespace BaseTicketRules.Loaders.sys
{

    /// <summary>
    /// 
    /// </summary>
    public partial class database_firewall_rulesLoader<T> : BaseLoader< T, database_firewall_rulesObject, ObjectList<T>>, IGenericGateway where T : database_firewall_rulesObject, new()
    {

        #region "Singleton"

        static database_firewall_rulesLoader<T> _instance;

        private database_firewall_rulesLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static database_firewall_rulesLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new database_firewall_rulesLoader<T>();
                else {
                    database_firewall_rulesLoader<T> inst = HttpContext.Current.Items["BaseTicketRules.database_firewall_rulesLoaderSingleton"] as database_firewall_rulesLoader<T>;
                    if (inst == null) {
                        inst = new database_firewall_rulesLoader<T>();
                        HttpContext.Current.Items.Add("BaseTicketRules.database_firewall_rulesLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={""};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(database_firewall_rulesObject);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "sys.database_firewall_rules"; }
        }

        
        /// <summary>
        /// If this table is read only
        /// </summary>
        protected override bool IsReadOnly()
        {
            return true;
        }
        

        

        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, database_firewall_rulesObject entity)
        {
            
            IMappeabledatabase_firewall_rulesObject database_firewall_rules = (IMappeabledatabase_firewall_rulesObject)entity;
            database_firewall_rules.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetString(2),
reader.GetString(3),
reader.GetDateTime(4),
reader.GetDateTime(5));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        



        /// <summary>
        /// Get a database_firewall_rules by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a database_firewall_rulesList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





