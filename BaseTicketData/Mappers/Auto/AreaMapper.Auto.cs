
        
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.3.0
// Created: 22/10/2018 - 09:11 a. m.
// This is a partial class file. The other one is AreaMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BaseTicketRules.Entities;
using BaseTicketRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BaseTicketRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class AreaMapper : BaseGateway<Area, AreaList>, IGenericGateway
    {


        #region "Singleton"

        static AreaMapper _instance;

        private AreaMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static AreaMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new AreaMapper();
                else {
                    AreaMapper inst = HttpContext.Current.Items["BaseTicketRules.AreaMapperSingleton"] as AreaMapper;
                    if (inst == null) {
                        inst = new AreaMapper();
                        HttpContext.Current.Items.Add("BaseTicketRules.AreaMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"AreaId"};
            return s;
        }

        /// <summary>
        ///
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Area);
        }

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Area"; }
        }

        /// <summary>
        /// Return the AreaMapper type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(AreaMapper).FullName;}
        }


        

        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Area entity)
        {
            
            IMappeableAreaObject Area = (IMappeableAreaObject)entity;
            Area.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1));
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(Area entity)
        {

            IMappeableAreaObject Area = (IMappeableAreaObject)entity;
            return Area.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(Area entity)
        {

            IMappeableAreaObject Area = (IMappeableAreaObject)entity;
            return Area.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(Area entity)
        {

            IMappeableAreaObject Area = (IMappeableAreaObject)entity;
            return Area.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Area entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableAreaObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Area entity)
        {
            
            ((IMappeableArea)entity).CompleteEntity();
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          


        /// <summary>
        /// Get a Area by execute a SQL Query Text
        /// </summary>
        public Area GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a AreaList by execute a SQL Query Text
        /// </summary>
        public AreaList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        
        /// <summary>
        /// 
        /// </summary>
        public Area GetOne(System.Int32 AreaId)
        {
            return base.GetOne(new Area(AreaId));
        }
        

        // GetOne By Objects and Params
            


        


        

        
        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Area_Delete", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Area_Delete", AreaId);
        }


        // Delete By Objects and Params
            



        


    


    


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BaseTicketRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public partial class AreaMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BaseTicketRules.Mappers.AreaMapper Instance()
        {
            return BaseTicketRules.Mappers.AreaMapper.Instance(); 
        }
        
        
        /// <summary>
        /// Get a AreaEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Area GetOne(System.Int32 AreaId) {
            return Instance().GetOne( AreaId);
        }
        

        // GetBy Objects and Params
            

        

        /// <summary>
        /// GetAll Area 
        /// </summary>
        public Entities.AreaList GetAll(){  
            return Instance().GetAll();
        }

        
        

        /// <summary>
        /// Delete children for Area
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Area entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        
        /// <summary>
        /// Delete Area 
        /// </summary>
        public void Delete(System.Int32 AreaId){
            Instance().Delete(AreaId);
        }

        /// <summary>
        /// Delete Area 
        /// </summary>
        public void Delete(Entities.Area entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Area  
        /// </summary>
        public void Save(Entities.Area entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Area 
        /// </summary>
        public void Insert(Entities.Area entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// Save Area 
        /// </summary>
        public void Save(System.Int32 AreaId, System.String Descripcion){
            Entities.Area entity = Instance().GetOne(AreaId);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "AreaId", AreaId));

            entity.Descripcion = Descripcion;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Area
        /// </summary>
        public void Insert(System.String Descripcion){
            Entities.Area entity = new Entities.Area();

            entity.Descripcion = Descripcion;
            Instance().Insert(entity);
        }

        


        //Database Queries 
        


    }
}





namespace BaseTicketRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class AreaLoader<T> : BaseLoader< T, Area, ObjectList<T>>, IGenericGateway where T : Area, new()
    {

        #region "Singleton"

        static AreaLoader<T> _instance;

        private AreaLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static AreaLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new AreaLoader<T>();
                else {
                    AreaLoader<T> inst = HttpContext.Current.Items["BaseTicketRules.AreaLoaderSingleton"] as AreaLoader<T>;
                    if (inst == null) {
                        inst = new AreaLoader<T>();
                        HttpContext.Current.Items.Add("BaseTicketRules.AreaLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"AreaId"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Area);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Area"; }
        }

        

        

        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Area entity)
        {
            
            IMappeableAreaObject Area = (IMappeableAreaObject)entity;
            Area.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            
            ((IMappeableArea)entity).CompleteEntity();
        }


        



        /// <summary>
        /// Get a Area by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a AreaList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        
        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 AreaId)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Area_GetOne", AreaId);
        }
        


        // GetOne By Objects and Params
            


        


        

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





