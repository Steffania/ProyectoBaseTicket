
//------------------------------------------------------------------------------
// This file was generated by Cooperator Modeler, version 1.3.3.0
// Created: 20/10/2018 - 12:37 p. m.
// This is a partial class file. The other one is TicketsMapper.cs
// You should not modifiy this file, please edit the other partial class file.
//------------------------------------------------------------------------------

using System;
using BaseTicketRules.Entities;
using BaseTicketRules.Objects;
using Cooperator.Framework.Data;
using Cooperator.Framework.Data.Exceptions;
using Cooperator.Framework.Core;
using System.Data.Common;
using System.Reflection;
using System.Web;
using System.Data;

namespace BaseTicketRules.Mappers
{

    
    /// <summary>
    /// 
    /// </summary>
    public partial class TicketsMapper : BaseGateway<Tickets, TicketsList>, IGenericGateway
    {


        #region "Singleton"

        static TicketsMapper _instance;

        private TicketsMapper()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TicketsMapper Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TicketsMapper();
                else {
                    TicketsMapper inst = HttpContext.Current.Items["BaseTicketRules.TicketsMapperSingleton"] as TicketsMapper;
                    if (inst == null) {
                        inst = new TicketsMapper();
                        HttpContext.Current.Items.Add("BaseTicketRules.TicketsMapperSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"TicketId"};
            return s;
        }

        /// <summary>
        ///
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Tickets);
        }

        /// <summary>
        /// Return the mapped table name
        /// </summary>
        protected override string TableName
        {
            get { return "Tickets"; }
        }

        /// <summary>
        /// Return the TicketsMapper type FullName
        /// </summary>
        protected override string RuleName
        {
            get {return typeof(TicketsMapper).FullName;}
        }


        

        

        /// <summary>
        /// Assign properties values based on DataReader
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Tickets entity)
        {
            
            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            Tickets.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetDateTime(7),
reader.GetString(8));
        }

        /// <summary>
        /// Get field values to call insertion stored procedure
        /// </summary>
        protected override object[] GetFieldsForInsert(Tickets entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForInsert();
        }

        /// <summary>
        /// Get field values to call update stored procedure
        /// </summary>
        protected override object[] GetFieldsForUpdate(Tickets entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForUpdate();
        }

        /// <summary>
        /// Get field values to call deletion stored procedure
        /// </summary>
        protected override object[] GetFieldsForDelete(Tickets entity)
        {

            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            return Tickets.GetFieldsForDelete();
        }


        /// <summary>
        /// Raised after insert and update
        /// </summary>
        protected override void UpdateObjectFromOutputParams(Tickets entity, object[] parameters)
        {
            // Update properties from Output parameters
            ((IMappeableTicketsObject) entity).UpdateObjectFromOutputParams(parameters);
        }

        /// <summary>
        /// StoredProceduresPrefix, for example: coop_
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        


        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(Tickets entity)
        {
            Objects.AreaObject AreaEntity = null; // Lazy load
            ((IMappeableTickets)entity).CompleteEntity(AreaEntity);
        }


        # region CRUD Operations
        

        # endregion

        /// <summary>
        /// Delete children for this entity
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, IUniqueIdentifiable entity)
        {
                        
        }


          


        /// <summary>
        /// Get a Tickets by execute a SQL Query Text
        /// </summary>
        public Tickets GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TicketsList by execute a SQL Query Text
        /// </summary>
        public TicketsList GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }


        
        /// <summary>
        /// 
        /// </summary>
        public Tickets GetOne(System.Int32 TicketId)
        {
            return base.GetOne(new Tickets(TicketId));
        }
        

        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public TicketsList GetByArea(DbTransaction transaction, System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public TicketsList GetByArea(DbTransaction transaction, IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public TicketsList GetByArea(System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public TicketsList GetByArea(IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    

        
        /// <summary>
        /// 
        /// </summary>
        public void Delete(System.Int32 TicketId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_Delete", TicketId);
        }

        /// <summary>
        /// 
        /// </summary>
        public void Delete(DbTransaction transaction, System.Int32 TicketId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_Delete", TicketId);
        }


        // Delete By Objects and Params
            



        


    


    


    


    


    


    


    


    


    


    

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByArea(System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_DeleteByArea", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByArea(DbTransaction transaction, System.Int32 AreaId)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_DeleteByArea", AreaId);
        }


        /// <summary>
        /// 
        /// </summary>
        public void DeleteByArea(IUniqueIdentifiable Area)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(StoredProceduresPrefix() + "Tickets_DeleteByArea", Area.Identifier());
        }

        /// <summary>
        /// 
        /// </summary>
        public void DeleteByArea(DbTransaction transaction, IUniqueIdentifiable Area)
        {
            base.DataBaseHelper.ExecuteNoQueryByStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_DeleteByArea", Area.Identifier());
        }

        


    


        //Database Queries 
        


        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion


    }


}

namespace BaseTicketRules.Wrappers
{
    /// <summary>
    /// 
    /// </summary>
    public partial class TicketsMapperWrapper
    {

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            return Instance().GetPKPropertiesNames();
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return Instance().GetMappingType();
        }



        /// <summary>
        /// 
        /// </summary>
        public BaseTicketRules.Mappers.TicketsMapper Instance()
        {
            return BaseTicketRules.Mappers.TicketsMapper.Instance(); 
        }
        
        
        /// <summary>
        /// Get a TicketsEntity by calling a Stored Procedure
        /// </summary>
        public Entities.Tickets GetOne(System.Int32 TicketId) {
            return Instance().GetOne( TicketId);
        }
        

        // GetBy Objects and Params
            

        

        /// <summary>
        /// Get a TicketsList by calling a Stored Procedure
        /// </summary>
        public Entities.TicketsList GetByArea(System.Int32 AreaId)
        {
            return Instance().GetByArea(AreaId);
        }

        /// <summary>
        /// Get a TicketsList by calling a Stored Procedure
        /// </summary>
        public Entities.TicketsList GetByArea(IUniqueIdentifiable Area)
        {
            return Instance().GetByArea(Area);
        }

    

        /// <summary>
        /// GetAll Tickets 
        /// </summary>
        public Entities.TicketsList GetAll(){  
            return Instance().GetAll();
        }

        
        

        /// <summary>
        /// Delete children for Tickets
        /// </summary>
        public void DeleteChildren(DbTransaction transaction, Tickets entity)
        {
            Instance().DeleteChildren(transaction, entity);
        }

        

            

        

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(System.Int32 AreaId)
        {
            Instance().DeleteByArea(AreaId);
        }

        /// <summary>
        /// Delete Tickets by Area
        /// </summary>
        public void DeleteByArea(IUniqueIdentifiable Area)
        {
            Instance().DeleteByArea(Area);
        }

    
        /// <summary>
        /// Delete Tickets 
        /// </summary>
        public void Delete(System.Int32 TicketId){
            Instance().Delete(TicketId);
        }

        /// <summary>
        /// Delete Tickets 
        /// </summary>
        public void Delete(Entities.Tickets entity ){
            Instance().Delete(entity);
        }

        /// <summary>
        /// Save Tickets  
        /// </summary>
        public void Save(Entities.Tickets entity){
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Tickets 
        /// </summary>
        public void Insert(Entities.Tickets entity){
            Instance().Insert(entity);
        }

        /// <summary>
        /// Save Tickets 
        /// </summary>
        public void Save(System.Int32 TicketId, System.String Numero, System.Int32 AreaId, System.String Nombre, System.String Apellido, System.String Telefono, System.String Email, System.DateTime FechaTicket, System.String Descripcion){
            Entities.Tickets entity = Instance().GetOne(TicketId);
            if (entity == null)
                throw new ApplicationException(String.Format("Entity not found. IUniqueIdentifiable Values: {0} = {1}", "TicketId", TicketId));

            entity.Numero = Numero;
            entity.AreaId = AreaId;
            entity.Nombre = Nombre;
            entity.Apellido = Apellido;
            entity.Telefono = Telefono;
            entity.Email = Email;
            entity.FechaTicket = FechaTicket;
            entity.Descripcion = Descripcion;
            Instance().Save(entity);
        }

        /// <summary>
        /// Insert Tickets
        /// </summary>
        public void Insert(System.String Numero, System.Int32 AreaId, System.String Nombre, System.String Apellido, System.String Telefono, System.String Email, System.DateTime FechaTicket, System.String Descripcion){
            Entities.Tickets entity = new Entities.Tickets();

            entity.Numero = Numero;
            entity.AreaId = AreaId;
            entity.Nombre = Nombre;
            entity.Apellido = Apellido;
            entity.Telefono = Telefono;
            entity.Email = Email;
            entity.FechaTicket = FechaTicket;
            entity.Descripcion = Descripcion;
            Instance().Insert(entity);
        }

        


        //Database Queries 
        


    }
}





namespace BaseTicketRules.Loaders
{

    /// <summary>
    /// 
    /// </summary>
    public partial class TicketsLoader<T> : BaseLoader< T, Tickets, ObjectList<T>>, IGenericGateway where T : Tickets, new()
    {

        #region "Singleton"

        static TicketsLoader<T> _instance;

        private TicketsLoader()
        {
        }

        /// <summary>
        /// 
        /// </summary>
        public static TicketsLoader<T> Instance() {
            if (_instance == null) {
                if (HttpContext.Current == null) 
                    _instance = new TicketsLoader<T>();
                else {
                    TicketsLoader<T> inst = HttpContext.Current.Items["BaseTicketRules.TicketsLoaderSingleton"] as TicketsLoader<T>;
                    if (inst == null) {
                        inst = new TicketsLoader<T>();
                        HttpContext.Current.Items.Add("BaseTicketRules.TicketsLoaderSingleton", inst);
                    }
                    return inst;
                }
            }
            return _instance;
        }


        #endregion

        /// <summary>
        /// 
        /// </summary>
        public string[] GetPKPropertiesNames()
        {
            
            string[] s ={"TicketId"};
            return s;
        }
        /// <summary>
        /// 
        /// </summary>
        public Type GetMappingType()
        {
            return typeof(Tickets);
        }


        /// <summary>
        /// 
        /// </summary>
        protected override string TableName
        {
            get { return "Tickets"; }
        }

        

        

        
        /// <summary>
        /// 
        /// </summary>
        protected override void HydrateFields(DbDataReader reader, Tickets entity)
        {
            
            IMappeableTicketsObject Tickets = (IMappeableTicketsObject)entity;
            Tickets.HydrateFields(
            reader.GetInt32(0),
reader.GetString(1),
reader.GetInt32(2),
reader.GetString(3),
reader.GetString(4),
reader.GetString(5),
reader.GetString(6),
reader.GetDateTime(7),
reader.GetString(8));
        }

        /// <summary>
        /// 
        /// </summary>
        protected override string StoredProceduresPrefix()
        {
            return "coop_";
        }


        
    

        

        /// <summary>
        /// Complete the aggregations for this entity. 
        /// </summary>
        protected override void CompleteEntity(T entity)
        {
            Objects.AreaObject AreaEntity = null; // Lazy load
            ((IMappeableTickets)entity).CompleteEntity(AreaEntity);
        }


        



        /// <summary>
        /// Get a Tickets by execute a SQL Query Text
        /// </summary>
        public T GetOneBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectBySQLText(sqlQueryText);
        }

        /// <summary>
        /// Get a TicketsList by execute a SQL Query Text
        /// </summary>
        public ObjectList<T> GetBySQLQuery(string sqlQueryText)
        {
            return base.GetObjectListBySQLText(sqlQueryText);
        }

        
        /// <summary>
        /// GetOne By Params
        /// </summary>
        public T GetOne(System.Int32 TicketId)
        {
            return base.GetObjectByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetOne", TicketId);
        }
        


        // GetOne By Objects and Params
            


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByArea(DbTransaction transaction, System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByArea(DbTransaction transaction, IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(transaction, StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    


        

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByArea(System.Int32 AreaId)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", AreaId);
        }

        /// <summary>
        /// 
        /// </summary>
        public ObjectList<T> GetByArea(IUniqueIdentifiable Area)
        {
            return base.GetObjectListByAnyStoredProcedure(StoredProceduresPrefix() + "Tickets_GetByArea", Area.Identifier());
        }

    

        //Database Queries 
        



        #region IGenericGateway

        object IGenericGateway.GetOne(IUniqueIdentifiable identifier)
        {
            return base.GetOne(identifier);
        }

        object IGenericGateway.GetAll()
        {
            return base.GetAll();
        }

        object IGenericGateway.GetByParent(IUniqueIdentifiable parentEntity)
        {
            return base.GetByParent(parentEntity);
        }

        #endregion

    }
}





